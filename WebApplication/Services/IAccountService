using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using TWeb48.Helpers;
using WebApplication.Dto;
using WebApplication.Models;

namespace WebApplication.Services
{
    public interface IAccountService
    {
        string Login(LoginRequest model);
        ActionResult Register(RegisterRequest model);

    

        User EditProfil(User user);
    }

    public class AccountService : IAccountService
    {
        private readonly TWebDbContext _context;
        public AccountService()
        {
            _context = new TWebDbContext();
        }
        public string Login(LoginRequest model)
        {
            var user = _context.Users.FirstOrDefault(u => u.Username == model.Username);
            if (user == null)
            {
                return "/Account/Login";
            }

            if (!PasswordHelper.VerifyPassword(model.Password, user.PasswordHash))
            {
                return null;
            }
            var role = _context.Roles.FirstOrDefault(x => x.Id == user.RoleIds);
            var userData = $"{user.Id}, {role.Name}";

            var ticket = new FormsAuthenticationTicket(
                1,
                user.Username,
                DateTime.Now,
                DateTime.Now.AddMinutes(30),
                true,
                userData,
                FormsAuthentication.FormsCookiePath
            );

            string encryptedTicket = FormsAuthentication.Encrypt(ticket);
            var authCookie = new HttpCookie(FormsAuthentication.FormsCookieName, encryptedTicket)
            {
                HttpOnly = true,
                Secure = FormsAuthentication.RequireSSL
            };
            HttpContext.Current.Response.Cookies.Add(authCookie);
            return "/Home/Index";
        }

        public ActionResult Register(RegisterRequest model)
        {
            var user = new User
            {
                Id = Guid.NewGuid(),
                Username = model.Username,
                Email = model.Email,
                PasswordHash = PasswordHelper.HashPassword(model.Password),
            };

            var role = _context.Roles.FirstOrDefault(r => r.Name == "User");
            user.RoleIds = role.Id;

            _context.Users.Add(user);
            _context.SaveChanges();

            return new RedirectResult("/Home/Index");
        }

        

        public User EditProfil(User user)
        {
            var existingUser = _context.Users.FirstOrDefault(u => u.Id == user.Id);
            if (existingUser == null) return null;

            // Обновляем только разрешенные поля
            existingUser.Username = user.Username;
            existingUser.Email = user.Email;

            // Обновление пароля только если он указан
            if (!string.IsNullOrEmpty(user.PasswordHash))
            {
                existingUser.PasswordHash = PasswordHelper.HashPassword(user.PasswordHash);
            }

            _context.Entry(existingUser).State = EntityState.Modified;
            _context.SaveChanges();

            return existingUser;
        }
    }
}
